{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\Workspace\\\\mutliple-tracks\\\\src\\\\components\\\\Pages\\\\client\\\\ShowImages.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchImages } from '../../../actions/imageActions';\nimport ImageModal from '../ImageModal';\nimport Carousel from 'react-multi-carousel';\nimport 'react-multi-carousel/lib/styles.css';\nimport { ImageWrapper } from './styledComponents';\nconst responsive = {\n  superLargeDesktop: {\n    breakpoint: {\n      max: 10000,\n      min: 1300\n    },\n    items: 3\n  },\n  desktop: {\n    breakpoint: {\n      max: 1300,\n      min: 992\n    },\n    items: 2\n  },\n  tablet: {\n    breakpoint: {\n      max: 992,\n      min: 500\n    },\n    items: 2\n  },\n  mobile: {\n    breakpoint: {\n      max: 500,\n      min: 0\n    },\n    items: 1\n  }\n};\n\nclass ShowImages extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      fetched: false,\n      showModalImage: false,\n      autoPlay: true\n    };\n\n    this.componentDidMount = async () => {\n      await this.props.fetchImages();\n      this.setState({\n        fetched: true\n      });\n    };\n\n    this.renderModalImage = () => {\n      if (this.state.showModalImage) {\n        return React.createElement(ImageModal, {\n          image: this.state.showModalImage,\n          onDismiss: () => {\n            this.setState({\n              showModalImage: false,\n              autoPlay: true\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        });\n      }\n    };\n  }\n\n  render() {\n    if (this.props.images !== [] && this.state.fetched) {\n      return React.createElement(\"div\", {\n        onMouseEnter: () => {\n          this.setState({\n            autoPlay: false\n          });\n        },\n        onMouseLeave: () => {\n          this.setState({\n            autoPlay: true\n          });\n        },\n        style: {\n          border: '2px solid  rgba(200, 200, 20, 0.5)',\n          borderRadius: '10px',\n          backgroundColor: 'rgb(250, 250, 250)',\n          marginBottom: '2vw'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.renderModalImage(), React.createElement(Carousel, {\n        responsive: responsive,\n        infinite: true,\n        autoPlay: this.state.autoPlay,\n        partialVisbile: true,\n        itemClass: \"image-item\",\n        autoPlaySpeed: 3000,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, this.props.images.map(image => {\n        return React.createElement(ImageWrapper, {\n          key: image._id,\n          onClick: () => {\n            this.setState({\n              showModalImage: image\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          src: image.link,\n          draggable: false,\n          alt: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }));\n      })));\n    } else {\n      return React.createElement(\"div\", {\n        className: \"m-20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Images Are Loading...\"));\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    images: Object.values(state.images)\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchImages\n})(ShowImages);","map":{"version":3,"sources":["D:/Code/Workspace/mutliple-tracks/src/components/Pages/client/ShowImages.js"],"names":["React","connect","fetchImages","ImageModal","Carousel","ImageWrapper","responsive","superLargeDesktop","breakpoint","max","min","items","desktop","tablet","mobile","ShowImages","Component","state","fetched","showModalImage","autoPlay","componentDidMount","props","setState","renderModalImage","render","images","border","borderRadius","backgroundColor","marginBottom","map","image","_id","link","mapStateToProps","Object","values"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { fetchImages } from '../../../actions/imageActions'\r\nimport ImageModal from '../ImageModal'\r\nimport Carousel from 'react-multi-carousel'\r\nimport 'react-multi-carousel/lib/styles.css'\r\nimport { ImageWrapper } from './styledComponents'\r\n\r\nconst responsive = {\r\n  superLargeDesktop: {\r\n    breakpoint: { max: 10000, min: 1300 },\r\n    items: 3\r\n  },\r\n  desktop: {\r\n    breakpoint: { max: 1300, min: 992 },\r\n    items: 2\r\n  },\r\n  tablet: {\r\n    breakpoint: { max: 992, min: 500 },\r\n    items: 2\r\n  },\r\n  mobile: {\r\n    breakpoint: { max: 500, min: 0 },\r\n    items: 1\r\n  }\r\n}\r\n\r\nclass ShowImages extends React.Component {\r\n  state = { fetched: false, showModalImage: false, autoPlay: true }\r\n\r\n  componentDidMount = async () => {\r\n    await this.props.fetchImages()\r\n    this.setState({ fetched: true })\r\n  }\r\n  renderModalImage = () => {\r\n    if (this.state.showModalImage) {\r\n      return (\r\n        <ImageModal\r\n          image={this.state.showModalImage}\r\n          onDismiss={() => {\r\n            this.setState({ showModalImage: false, autoPlay: true })\r\n          }}\r\n        />\r\n      )\r\n    }\r\n  }\r\n  render () {\r\n    if (this.props.images !== [] && this.state.fetched) {\r\n      return (\r\n        <div\r\n          onMouseEnter={() => {\r\n            this.setState({ autoPlay: false })\r\n          }}\r\n          onMouseLeave={() => {\r\n            this.setState({ autoPlay: true })\r\n          }}\r\n          style={{\r\n            border: '2px solid  rgba(200, 200, 20, 0.5)',\r\n            borderRadius: '10px',\r\n            backgroundColor: 'rgb(250, 250, 250)',\r\n            marginBottom: '2vw'\r\n          }}\r\n        >\r\n          {this.renderModalImage()}\r\n          <Carousel\r\n            responsive={responsive}\r\n            infinite\r\n            autoPlay={this.state.autoPlay}\r\n            partialVisbile\r\n            itemClass='image-item'\r\n            autoPlaySpeed={3000}\r\n          >\r\n            {this.props.images.map(image => {\r\n              return (\r\n                <ImageWrapper\r\n                  key={image._id}\r\n                  onClick={() => {\r\n                    this.setState({ showModalImage: image })\r\n                  }}\r\n                >\r\n                  <img src={image.link} draggable={false} alt='' />\r\n                </ImageWrapper>\r\n              )\r\n            })}\r\n          </Carousel>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div className='m-20'>\r\n          <h3>Images Are Loading...</h3>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    images: Object.values(state.images)\r\n  }\r\n}\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchImages }\r\n)(ShowImages)\r\n"]},"metadata":{},"sourceType":"module"}