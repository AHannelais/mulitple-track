{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\Workspace\\\\mutliple-tracks\\\\src\\\\components\\\\Audio.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button, Slider, AudioWrapper } from \"./styleSheet\";\n\nclass Audio extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      duration: null,\n      volume: 100,\n      savedVolume: 100\n    };\n\n    this.onChangeSlider = e => {\n      this.setState({\n        volume: e.target.value,\n        savedVolume: e.target.value\n      }, () => this.audio.volume = this.state.volume / 100);\n    };\n\n    this.sendData = () => {\n      this.props.parentCallback(this.state.duration);\n    };\n\n    this.onMuteButton = () => {\n      if (this.state.volume > 0) {\n        return React.createElement(Button, {\n          onClick: () => this.setState({\n            savedVolume: this.state.volume,\n            volume: 0\n          }, () => this.audio.volume = this.state.volume / 100),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          className: \"fas fa-volume-mute\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        }));\n      } else return React.createElement(Button, {\n        onClick: () => this.setState({\n          volume: this.state.savedVolume < 1 ? 100 : this.state.savedVolume\n        }, () => this.audio.volume = this.state.volume / 100),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fas fa-volume-up\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }));\n    };\n  }\n\n  handlePlay() {\n    if (this.props.play === \"play\" && this.audio && this.props.valid) {\n      this.audio.play();\n    }\n  }\n\n  handlePause() {\n    if (this.props.play === \"pause\" && this.audio) {\n      this.audio.pause();\n    }\n  }\n\n  handleStop() {\n    if (this.props.play === \"stop\" && this.audio) {\n      this.audio.currentTime = 0;\n      this.audio.pause();\n    }\n  }\n\n  componentDidMount() {\n    this.audio.onloadedmetadata = () => {\n      this.setState({\n        duration: this.audio.duration,\n        volume: this.audio.volume * 100\n      }, this.sendData);\n    };\n  }\n\n  render() {\n    return React.createElement(AudioWrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.handlePlay(), this.handleStop(), this.handlePause(), React.createElement(\"audio\", {\n      ref: audio => {\n        this.audio = audio;\n      },\n      src: this.props.src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \" \", this.state.volume, \"%\"), this.onMuteButton(), React.createElement(Slider, {\n      onChange: this.onChangeSlider,\n      defaultValue: \"100\",\n      type: \"range\",\n      name: \"points\",\n      min: \"0\",\n      max: \"100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    play: state.play.play\n  };\n};\n\nexport default connect(mapStateToProps)(Audio);","map":{"version":3,"sources":["D:/Code/Workspace/mutliple-tracks/src/components/Audio.js"],"names":["React","connect","Button","Slider","AudioWrapper","Audio","Component","state","duration","volume","savedVolume","onChangeSlider","e","setState","target","value","audio","sendData","props","parentCallback","onMuteButton","handlePlay","play","valid","handlePause","pause","handleStop","currentTime","componentDidMount","onloadedmetadata","render","src","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Button, Slider, AudioWrapper } from \"./styleSheet\";\r\nclass Audio extends React.Component {\r\n  state = {\r\n    duration: null,\r\n    volume: 100,\r\n    savedVolume: 100,\r\n  };\r\n  onChangeSlider = e => {\r\n    this.setState(\r\n      { volume: e.target.value, savedVolume: e.target.value },\r\n      () => (this.audio.volume = this.state.volume / 100)\r\n    );\r\n  };\r\n  handlePlay() {\r\n    if (this.props.play === \"play\" && this.audio && this.props.valid) {\r\n      this.audio.play();\r\n    }\r\n  }\r\n\r\n  handlePause() {\r\n    if (this.props.play === \"pause\" && this.audio) {\r\n      this.audio.pause();\r\n    }\r\n  }\r\n  handleStop() {\r\n    if (this.props.play === \"stop\" && this.audio) {\r\n      this.audio.currentTime = 0;\r\n      this.audio.pause();\r\n    }\r\n  }\r\n  sendData = () => {\r\n    this.props.parentCallback(this.state.duration);\r\n  };\r\n  onMuteButton = () => {\r\n    if (this.state.volume > 0) {\r\n      return (\r\n        <Button\r\n          onClick={() =>\r\n            this.setState(\r\n              { savedVolume: this.state.volume, volume: 0 },\r\n              () => (this.audio.volume = this.state.volume / 100)\r\n            )\r\n          }\r\n        >\r\n          <i className=\"fas fa-volume-mute\"></i>\r\n        </Button>\r\n      );\r\n    } else\r\n      return (\r\n        <Button\r\n          onClick={() =>\r\n            this.setState(\r\n              {\r\n                volume:\r\n                  this.state.savedVolume < 1 ? 100 : this.state.savedVolume,\r\n              },\r\n              () => (this.audio.volume = this.state.volume / 100)\r\n            )\r\n          }\r\n        >\r\n          <i className=\"fas fa-volume-up\"></i>\r\n        </Button>\r\n      );\r\n  };\r\n  componentDidMount() {\r\n    this.audio.onloadedmetadata = () => {\r\n      this.setState(\r\n        { duration: this.audio.duration, volume: this.audio.volume * 100 },\r\n        this.sendData\r\n      );\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <AudioWrapper>\r\n        {this.handlePlay()}\r\n        {this.handleStop()}\r\n        {this.handlePause()}\r\n        <audio\r\n          ref={audio => {\r\n            this.audio = audio;\r\n          }}\r\n          src={this.props.src}\r\n        />\r\n        <p> {this.state.volume}%</p>\r\n        {this.onMuteButton()}\r\n        <Slider\r\n          onChange={this.onChangeSlider}\r\n          defaultValue=\"100\"\r\n          type=\"range\"\r\n          name=\"points\"\r\n          min=\"0\"\r\n          max=\"100\"\r\n        />\r\n      </AudioWrapper>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return { play: state.play.play };\r\n};\r\nexport default connect(mapStateToProps)(Audio);\r\n"]},"metadata":{},"sourceType":"module"}