{"ast":null,"code":"var _jsxFileName = \"D:\\\\Code\\\\Workspace\\\\mutliple-tracks\\\\src\\\\components\\\\Audio.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nclass Audio extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      duration: null,\n      volume: null\n    };\n\n    this.sendData = () => {\n      this.props.parentCallback(this.state.duration);\n    };\n  }\n\n  handlePlay() {\n    if (this.props.play.play === \"play\") {\n      this.audio.play();\n    }\n  }\n\n  handleStop() {\n    if (this.props.play.play === \"\") this.audio.currentTime = 0;\n    this.slider.value = 0;\n    this.audio.pause();\n  }\n\n  componentDidMount() {\n    this.slider.value = 100;\n    this.currentTimeInterval = null;\n\n    this.audio.onloadedmetadata = () => {\n      console.log(this.audio.volume);\n      this.setState({\n        duration: this.audio.duration,\n        volume: this.audio.volume\n      }, this.sendData);\n    };\n    /*  this.audio.onplay = () => {\r\n      this.currentTimeInterval = setInterval(() => {}, 500);\r\n    };\r\n    */\n\n    /*   this.audio.onpause = () => {\r\n      clearInterval(this.currentTimeInterval);\r\n    };\r\n    */\n\n\n    this.slider.onchange = e => {\n      this.audio.volume = e.target.value / 100;\n    };\n  }\n\n  render() {\n    console.log(this.props.play);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, this.handlePlay(), React.createElement(\"audio\", {\n      ref: audio => {\n        this.audio = audio;\n      },\n      src: this.props.src,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Play\",\n      onClick: () => this.handlePlay,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"button\",\n      value: \"Stop\",\n      onClick: () => {},\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      ref: slider => {\n        this.slider = slider;\n      },\n      type: \"range\",\n      name: \"points\",\n      min: \"0\",\n      max: \"100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    play: state.play.play\n  };\n};\n\nexport default connect(mapStateToProps)(Audio);","map":{"version":3,"sources":["D:/Code/Workspace/mutliple-tracks/src/components/Audio.js"],"names":["React","connect","Audio","Component","state","duration","volume","sendData","props","parentCallback","handlePlay","play","audio","handleStop","currentTime","slider","value","pause","componentDidMount","currentTimeInterval","onloadedmetadata","console","log","setState","onchange","e","target","render","src","mapStateToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nclass Audio extends React.Component {\r\n  state = {\r\n    duration: null,\r\n    volume: null,\r\n  };\r\n\r\n  handlePlay() {\r\n    if (this.props.play.play === \"play\") {\r\n      this.audio.play();\r\n    }\r\n  }\r\n\r\n  handleStop() {\r\n    if (this.props.play.play === \"\") this.audio.currentTime = 0;\r\n    this.slider.value = 0;\r\n    this.audio.pause();\r\n  }\r\n  sendData = () => {\r\n    this.props.parentCallback(this.state.duration);\r\n  };\r\n  componentDidMount() {\r\n    this.slider.value = 100;\r\n    this.currentTimeInterval = null;\r\n\r\n    this.audio.onloadedmetadata = () => {\r\n      console.log(this.audio.volume);\r\n      this.setState(\r\n        { duration: this.audio.duration, volume: this.audio.volume },\r\n        this.sendData\r\n      );\r\n    };\r\n\r\n    /*  this.audio.onplay = () => {\r\n      this.currentTimeInterval = setInterval(() => {}, 500);\r\n    };\r\n*/\r\n    /*   this.audio.onpause = () => {\r\n      clearInterval(this.currentTimeInterval);\r\n    };\r\n*/\r\n    this.slider.onchange = e => {\r\n      this.audio.volume = e.target.value / 100;\r\n    };\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props.play);\r\n    return (\r\n      <div>\r\n        {this.handlePlay()}\r\n        <audio\r\n          ref={audio => {\r\n            this.audio = audio;\r\n          }}\r\n          src={this.props.src}\r\n        />\r\n        <input type=\"button\" value=\"Play\" onClick={() => this.handlePlay} />\r\n        <input type=\"button\" value=\"Stop\" onClick={() => {}} />\r\n\r\n        <p>\r\n          <input\r\n            ref={slider => {\r\n              this.slider = slider;\r\n            }}\r\n            type=\"range\"\r\n            name=\"points\"\r\n            min=\"0\"\r\n            max=\"100\"\r\n          />\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return { play: state.play.play };\r\n};\r\nexport default connect(mapStateToProps)(Audio);\r\n"]},"metadata":{},"sourceType":"module"}